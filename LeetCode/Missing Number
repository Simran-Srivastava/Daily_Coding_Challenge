'''
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
'''

#Python Code

class Solution:
    def mergeSort(self,arr): 
        if len(arr) >1: 
            mid = len(arr)//2 #Finding the mid of the array 
            L = arr[:mid] # Dividing the array elements  
            R = arr[mid:] # into 2 halves 

            self.mergeSort(L) # Sorting the first half 
            self.mergeSort(R) # Sorting the second half 

            i = j = k = 0
            while i < len(L) and j < len(R): 
                if L[i] < R[j]: 
                    arr[k] = L[i] 
                    i+=1
                else: 
                    arr[k] = R[j] 
                    j+=1
                k+=1
            while i < len(L): 
                arr[k] = L[i] 
                i+=1
                k+=1

            while j < len(R): 
                arr[k] = R[j] 
                j+=1
                k+=1
    def missingNumber(self, nums: List[int]) -> int:
        self.mergeSort(nums)
        if len(nums)==1:
            if nums[0]==0:
                return nums[0]+1
            else:
                return nums[0]-1
        else:
            if nums[0]==0:
                for i in range(len(nums)-1):
                    if abs(nums[i]-nums[i+1])!=1:
                        return nums[i]+1
            else:
                return nums[0]-1
        return nums[len(nums)-1]+1
        
