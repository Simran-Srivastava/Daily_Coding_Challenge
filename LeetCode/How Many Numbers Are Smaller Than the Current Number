'''
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

 

Example 1:

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
'''

#Python Code

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        brr=nums[::]
        nums.sort()
        #print(brr)
        #print(nums)
        count=0
        c=[]
        d=dict()
        d[nums[0]]=0
        for i in range(1,len(nums)):
            if nums[i]>nums[i-1]:
                count+=1
                d[nums[i]]=count
            elif nums[i]==nums[i-1]:
                count+=1
        for i in range(len(brr)):
            c.append(d.get(brr[i]))
        return c
